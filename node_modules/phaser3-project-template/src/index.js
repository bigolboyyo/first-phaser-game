import 'phaser';
import { monsters } from 'phaser3-project-template/src/lib/figures/monsters';
import { squidMovement } from 'phaser3-project-template/src/lib/animations/squid/squidMovement.js';
import { squidController } from 'phaser3-project-template/src/lib/animations/squid/squidController';
import { standardZoom } from 'phaser3-project-template/src/lib/camera/standardZoom';
import { spriteCreation } from 'phaser3-project-template/src/lib/spells/spriteCreation';


const squidMiniObj = monsters["squidMini"]
const bigDemonObj = monsters["bigDemon"]

import { demonIdle } from 'phaser3-project-template/src/lib/animations/bigDemon/demonIdle';
import { bigDemonStaging } from 'phaser3-project-template/src/lib/animations/bigDemon/bigDemonStaging';



var config = {
    type: Phaser.AUTO,
    parent: 'phaser-example',
    width: 800,
    height: 600,
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 300 },
            debug: false
        }
    },
    scene: {
        preload: preload,
        create: create,
        update: update
    }
};

let cameras;
let keyboard

let platforms;
let mainFloor;
let grass;

let cursors;

let squid;
let miniSquid;
let zombie;
let bigDemon;


var game = new Phaser.Game(config);




function preload (){
    const load = this.load

    load.image('city', 'assets/canvas_bkg2.png')
    load.image('road', 'assets/road.png')
    load.image('grass', "assets/grass.png")

    // custom anim === staging
    load.image("bigDemon", bigDemonObj.img)
    bigDemonStaging(bigDemonObj, load)
    
    // spritesheet === spritemap
    load.spritesheet("squid", "assets/squidMap.png", {frameWidth: 64, frameHeight: 64, endFrame: 3})

}

function create (){
    // utils
    const add = this.add
    const physics = this.physics.add
    const animation = this.anims

    // main camera
    cameras = this.cameras.main

    // add background
    add.image(400, 300, "city")
    
    // platforms 
    platforms = this.physics.add.staticGroup();
    mainFloor = platforms.create(400, 605, "road").refreshBody()
    mainFloor.visible = false

    platforms.create(300, 550, "grass").setScale(.2).refreshBody()
    platforms.create(325, 430, "grass").setScale(.2).refreshBody()
    platforms.create(450, 350, "grass").setScale(.2).refreshBody()
    platforms.create(200, 500, "grass").setScale(.2).refreshBody()
    


    demonIdle(animation)

    
    const spritePool = []
    
    
    // spriteCreation(x, y, name, physics, platforms, movement)
    // miniSquid = spriteCreation(400, 300, "miniSquid", physics, platforms, basicMovement)
    bigDemon = spriteCreation(200, 200, "bigDemon", physics, platforms, null).play("demonIdle")
    squid = spriteCreation(400, 300, "squid", physics, platforms, squidMovement)
    
    // physics.collider(miniSquid, bigDemon)

    
    keyboard = this.input.keyboard
    cursors = keyboard.createCursorKeys();

    standardZoom(cameras, squid)

    
}


function update(){
    
    squidController(squid, cursors, keyboard)


}

