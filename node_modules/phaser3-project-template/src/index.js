import 'phaser';
import { monsters } from 'phaser3-project-template/src/lib/figures/monsters';
import { squidMovement } from 'phaser3-project-template/src/lib/animations/squid/squidMovement.js';
import { squidController } from 'phaser3-project-template/src/lib/animations/squid/squidController';
import { standardZoom } from 'phaser3-project-template/src/lib/camera/standardZoom';
import { spriteCreation } from 'phaser3-project-template/src/lib/spells/spriteCreation';


const squidMiniObj = monsters["squidMini"]
const bigDemonObj = monsters["bigDemon"]

import { demonIdle } from 'phaser3-project-template/src/lib/animations/bigDemon/demonIdle';
import { katCoinMovement } from 'phaser3-project-template/src/lib/animations/katCoin/katCoinMovement';
import { bigDemonStaging } from 'phaser3-project-template/src/lib/animations/bigDemon/bigDemonStaging';
import { enemyFollows } from 'phaser3-project-template/src/lib/spells/enemyFollows';
// import { collectCoin } from 'phaser3-project-template/src/lib/spells/collectCoin';

var config = {
    type: Phaser.AUTO,
    parent: 'phaser-example',
    width: 800,
    height: 600,
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 300 },
            debug: false
        }
    },
    scene: {
        preload: preload,
        create: create,
        update: update
    }
};

let gameOver = false;
let scoreText;
let score = 0;

let add 
let physics
let animation
let cache

let cameras;
let keyboard

let platforms;
let mainFloor;
let grass;

let cursors;
let controls;

let squid;
let squidX
let squidY
let miniSquid;
let zombie;
let bigDemon;

let katCoins;


var game = new Phaser.Game(config);




function preload (){
    const load = this.load

    load.image('city', 'assets/canvas_bkg2.png')
    load.image('road', 'assets/road.png')
    load.image('grass', "assets/grass.png")

    // custom anim === staging
    load.image("bigDemon", bigDemonObj.img)
    bigDemonStaging(bigDemonObj, load)
    
    // spritesheet === spritemap
    load.spritesheet("squid", "assets/squidMap.png", {frameWidth: 32, frameHeight: 32, endFrame: 5})
    load.spritesheet("katCoins", "assets/katCoin.png", {frameWidth: 32, frameHeight: 32, endFrame: 3})

}

function create (){
    // utils
    add = this.add
    physics = this.physics.add
    animation = this.anims
    cache = this.cache

    // main camera
    cameras = this.cameras.main

    // add background
    add.image(400, 300, "city")
    
    // platforms 
    platforms = this.physics.add.staticGroup();
    mainFloor = platforms.create(400, 605, "road").refreshBody()
    mainFloor.visible = false

    platforms.create(300, 550, "grass").setScale(.2).refreshBody()
    platforms.create(325, 430, "grass").setScale(.2).refreshBody()
    platforms.create(450, 350, "grass").setScale(.2).refreshBody()
    platforms.create(200, 500, "grass").setScale(.2).refreshBody()
    



    demonIdle(animation)
    
    
    const spritePool = []
    
    
    // spriteCreation(x, y, name, physics, platforms, movement)
    // miniSquid = spriteCreation(400, 300, "miniSquid", physics, platforms, basicMovement)
    bigDemon = spriteCreation(200, 200, "bigDemon", physics, platforms, null).play("demonIdle")
    squid = spriteCreation(400, 300, "squid", physics, platforms, squidMovement)
    
    scoreText = this.add.text(400,580, 'score: 0', { fontSize: '16px', fill: '#000' });
    
    // katCoins = spriteCreation(100, 100, "katCoin", physics, platforms, katCoinMovement).play("coinIdle")
    katCoins = physics.group({
        key: "katCoins",
        setXY: { x: 100, y: 100}
    })

    katCoins.children.entries[0].name = "katCoins"
    katCoinMovement(katCoins.children.entries[0])
    katCoins.children.entries[0].play("coinIdle")
    physics.collider(katCoins.children.entries[0], platforms)
  
    physics.collider(squid, bigDemon)
  
    keyboard = this.input.keyboard
    cursors = keyboard.createCursorKeys();
    
    
    
    // var controlConfig = {
        //     camera: this.cameras.main,
        //     left: cursors.left,
        //     right: cursors.right,
        //     up: cursors.up,
        //     down: cursors.down,
        //     acceleration: 0.06,
        //     drag: 0.0005,
        //     maxSpeed: 1.0
        // };
        
        // controls = this.controls
        // controls = new Phaser.Cameras.Controls.SmoothedKeyControl(controlConfig);
        
        standardZoom(cameras, squid)
        
        
         physics.overlap(squid, katCoins, collectCoin, null, this )
    
    
}


function update(){
    squidController(squid, cursors, keyboard)
    // enemyFollows(physics, bigDemon, squid)

    
}


function collectCoin (squid, coin)  {
     coin.disableBody(true, true);
     score += 10;
     scoreText.setText('Score: ' + score);
 }